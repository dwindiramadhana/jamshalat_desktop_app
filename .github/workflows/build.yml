name: 'Build and Release Jam Shalat'

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could use ubuntu-20.04.
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up the linux and windows runners.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # change this to npm or pnpm depending on which one you use.

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_UNSPLASH_ACCESS_KEY: ${{ secrets.VITE_UNSPLASH_ACCESS_KEY }}
        with:
          # Only create release for actual release events
          tagName: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}
          releaseName: ${{ github.event_name == 'release' && 'Jam Shalat v__VERSION__' || '' }}
          releaseBody: ${{ github.event_name == 'release' && 'See the assets to download and install this version.' || '' }}
          releaseDraft: ${{ github.event_name == 'release' && false || true }}
          prerelease: false
          args: ${{ matrix.args }}

      - name: Upload artifacts (macOS)
        if: github.event_name != 'release' && matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: jam-shalat-${{ matrix.platform }}-${{ matrix.target || 'default' }}
          path: |
            src-tauri/target/${{ matrix.target || 'release' }}/release/bundle/dmg/
            src-tauri/target/${{ matrix.target || 'release' }}/release/bundle/macos/
            src-tauri/target/release/bundle/dmg/
            src-tauri/target/release/bundle/macos/
            !src-tauri/target/*/release/bundle/*/*.dSYM
          retention-days: 30
          if-no-files-found: warn

      - name: Upload artifacts (Windows)
        if: github.event_name != 'release' && matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: jam-shalat-${{ matrix.platform }}-${{ matrix.target || 'default' }}
          path: |
            src-tauri/target/release/bundle/msi/
            src-tauri/target/release/bundle/nsis/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload artifacts (Linux)
        if: github.event_name != 'release' && matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: jam-shalat-${{ matrix.platform }}-${{ matrix.target || 'default' }}
          path: |
            src-tauri/target/release/bundle/deb/
            src-tauri/target/release/bundle/appimage/
          retention-days: 30
          if-no-files-found: warn

  # Android mobile build (separate job to avoid interfering with desktop builds)
  android-build:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java for Android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup NDK_HOME environment
        run: |
          echo "Setting up NDK_HOME environment variable..."
          # Debug: Show what's in the NDK directory
          echo "Available NDK versions:"
          ls -la $ANDROID_HOME/ndk/ || echo "NDK directory not found"
          
          # Find the actual NDK folder (it's usually a version number like 27.3.13750724)
          NDK_VERSION=$(ls $ANDROID_HOME/ndk/ | head -1)
          if [ -n "$NDK_VERSION" ]; then
            export NDK_HOME="$ANDROID_HOME/ndk/$NDK_VERSION"
            echo "NDK_HOME=$NDK_HOME" >> $GITHUB_ENV
            echo "✅ NDK_HOME set to: $NDK_HOME"
          else
            echo "❌ ERROR: No NDK version found in $ANDROID_HOME/ndk/"
            exit 1
          fi

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm install

      - name: Setup Rust for Android
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Create Android-specific Tauri config
        run: |
          echo "Creating Android-specific Tauri configuration..."
          # Create a copy of tauri.conf.json with Android-specific settings
          cp src-tauri/tauri.conf.json src-tauri/tauri.conf.android.json
          echo "Original config copied"
          
          # Update the identifier for Android
          sed -i 's/"com.jamshalat.desktop"/"com.jamshalat.mobile"/' src-tauri/tauri.conf.android.json
          echo "Bundle identifier updated"
          
          # Add Android configuration
          jq '.bundle.android = {"minSdkVersion": 24}' src-tauri/tauri.conf.android.json > temp.json && mv temp.json src-tauri/tauri.conf.android.json
          echo "Android configuration added"
          
          # Add mobile plugins
          jq '.plugins = {"shell": {"open": true}}' src-tauri/tauri.conf.android.json > temp.json && mv temp.json src-tauri/tauri.conf.android.json
          echo "Mobile plugins added"
          
          # Verify the configuration
          echo "Final Android config:"
          cat src-tauri/tauri.conf.android.json

      - name: Create Android-specific Cargo.toml
        run: |
          echo "Creating Android-specific Cargo.toml..."
          # Create a copy of Cargo.toml with mobile features
          cp src-tauri/Cargo.toml src-tauri/Cargo.toml.android
          echo "Original Cargo.toml copied"
          
          # Keep original Tauri features (no mobile feature exists in 2.7.0)
          # sed -i 's/features = \[\]/features = ["mobile"]/' src-tauri/Cargo.toml.android
          echo 'tauri-plugin-shell = "2"' >> src-tauri/Cargo.toml.android
          echo 'tauri-plugin-fs = "2"' >> src-tauri/Cargo.toml.android
          echo 'tauri-plugin-dialog = "2"' >> src-tauri/Cargo.toml.android
          echo "Mobile plugins added (no Tauri mobile feature needed for 2.7.0)"
          
          # Show the modified Cargo.toml
          echo "Modified Cargo.toml:"
          cat src-tauri/Cargo.toml.android
          
          # Replace original with Android version temporarily
          echo "Backing up original files and switching to Android configs..."
          mv src-tauri/Cargo.toml src-tauri/Cargo.toml.original
          mv src-tauri/Cargo.toml.android src-tauri/Cargo.toml
          mv src-tauri/tauri.conf.json src-tauri/tauri.conf.json.original
          mv src-tauri/tauri.conf.android.json src-tauri/tauri.conf.json
          echo "Configuration files switched to Android versions"

      - name: Clean and Initialize Android platform
        run: |
          echo "Cleaning any existing Android project to avoid bundle identifier conflicts..."
          # Remove any existing gen/android folder to ensure clean initialization
          if [ -d "src-tauri/gen/android" ]; then
            echo "Removing existing gen/android folder"
            rm -rf src-tauri/gen/android
          fi
          echo "Initializing Android platform with new bundle identifier..."
          echo "NDK_HOME is set to: $NDK_HOME"
          npm run tauri android init
          
          # Verify Android project was created successfully
          if [ -d "src-tauri/gen/android" ]; then
            echo "✅ Android project initialized successfully"
            echo "Android project structure:"
            ls -la src-tauri/gen/android/
          else
            echo "❌ ERROR: Android project was not created!"
            echo "Current src-tauri/gen contents:"
            ls -la src-tauri/gen/ || echo "src-tauri/gen directory does not exist"
            exit 1
          fi

      - name: Setup Android signing
        run: |
          # Verify Android project directory exists before proceeding
          if [ ! -d "src-tauri/gen/android" ]; then
            echo "❌ ERROR: src-tauri/gen/android directory does not exist!"
            echo "Android initialization may have failed. Current directory structure:"
            find src-tauri -type d -name "*android*" || echo "No android directories found"
            exit 1
          fi
          
          cd src-tauri/gen/android
          echo "Setting up Android signing configuration..."
          
          # Clean up any existing keystore to avoid alias conflicts
          if [ -f "../../../android-release-key.jks" ]; then
            echo "Removing existing keystore to avoid alias conflicts"
            rm ../../../android-release-key.jks
          fi
          
          # Create keystore.properties for signing
          echo "storeFile=../../../android-release-key.jks" > keystore.properties
          echo "storePassword=jamshalat2024" >> keystore.properties
          echo "keyAlias=jam-shalat-key" >> keystore.properties
          echo "keyPassword=jamshalat2024" >> keystore.properties
          echo "Keystore properties created"
          
          # Create a demo keystore (in production, use secrets)
          echo "Creating new Android keystore..."
          keytool -genkey -v -keystore ../../../android-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias jam-shalat-key -dname "CN=Jam Shalat, OU=Development, O=Jam Shalat Mobile, L=Jakarta, ST=Jakarta, C=ID" -storepass jamshalat2024 -keypass jamshalat2024
          echo "Android keystore created successfully"
          
          echo "✅ Keystore and properties configured for APK signing"

      - name: Build Android APK
        run: npm run tauri android build

      - name: Sign Android APK with modern signing
        run: |
          cd src-tauri/gen/android
          echo "Signing the generated APK with modern v2/v3 signature schemes..."
          
          # Find the unsigned APK
          UNSIGNED_APK=$(find app/build/outputs/apk -name "*unsigned*.apk" | head -1)
          if [ -n "$UNSIGNED_APK" ]; then
            echo "Found unsigned APK: $UNSIGNED_APK"
            
            # Create signed APK name
            SIGNED_APK="${UNSIGNED_APK/unsigned/signed}"
            
            # First, align the APK (required for modern signing)
            echo "Aligning APK..."
            ALIGNED_APK="${UNSIGNED_APK/unsigned/aligned}"
            
            # Find the build-tools version directory (not the parent directory)
            echo "Available build-tools versions:"
            ls -la $ANDROID_HOME/build-tools/
            
            BUILD_TOOLS_DIR=$(find $ANDROID_HOME/build-tools -maxdepth 1 -type d -name "*.*.*" | head -1)
            if [ -z "$BUILD_TOOLS_DIR" ]; then
              # Fallback: find any subdirectory that contains zipalign
              BUILD_TOOLS_DIR=$(find $ANDROID_HOME/build-tools -name "zipalign" -type f | head -1 | xargs dirname)
            fi
            echo "Using build-tools: $BUILD_TOOLS_DIR"
            
            # Verify zipalign exists
            if [ ! -f "$BUILD_TOOLS_DIR/zipalign" ]; then
              echo "❌ zipalign not found in $BUILD_TOOLS_DIR"
              echo "Searching for zipalign in all build-tools directories..."
              find $ANDROID_HOME/build-tools -name "zipalign" -type f
              exit 1
            fi
            
            # Align the APK
            echo "Running: $BUILD_TOOLS_DIR/zipalign -v 4 $UNSIGNED_APK $ALIGNED_APK"
            $BUILD_TOOLS_DIR/zipalign -v 4 "$UNSIGNED_APK" "$ALIGNED_APK"
            
            # Verify apksigner exists
            if [ ! -f "$BUILD_TOOLS_DIR/apksigner" ]; then
              echo "❌ apksigner not found in $BUILD_TOOLS_DIR"
              echo "Searching for apksigner in all build-tools directories..."
              find $ANDROID_HOME/build-tools -name "apksigner" -type f
              exit 1
            fi
            
            # Sign the APK using apksigner (modern v2/v3 signing)
            echo "Signing APK with apksigner (v2/v3 signature schemes)..."
            echo "Running: $BUILD_TOOLS_DIR/apksigner sign ..."
            $BUILD_TOOLS_DIR/apksigner sign \
              --ks ../../../android-release-key.jks \
              --ks-key-alias jam-shalat-key \
              --ks-pass pass:jamshalat2024 \
              --key-pass pass:jamshalat2024 \
              --v1-signing-enabled true \
              --v2-signing-enabled true \
              --v3-signing-enabled true \
              --out "$SIGNED_APK" \
              "$ALIGNED_APK"
            
            echo "✅ APK signed successfully with v1/v2/v3 schemes: $SIGNED_APK"
            
            # Verify the signature with apksigner
            echo "Verifying APK signature..."
            echo "Running: $BUILD_TOOLS_DIR/apksigner verify --verbose $SIGNED_APK"
            $BUILD_TOOLS_DIR/apksigner verify --verbose "$SIGNED_APK"
            
            # Clean up temporary files
            rm -f "$ALIGNED_APK"
            
            # Show APK info
            echo "APK Information:"
            ls -la "$SIGNED_APK"
            
          else
            echo "❌ No unsigned APK found"
            echo "Available APK files:"
            find app/build/outputs/apk -name "*.apk" || echo "No APK files found"
          fi

      - name: Upload Android artifacts
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: jam-shalat-android-apk
          path: |
            src-tauri/gen/android/app/build/outputs/apk/universal/release/
            src-tauri/gen/android/app/build/outputs/bundle/universalRelease/
          retention-days: 30
          if-no-files-found: warn

      - name: Restore original configs
        if: always()
        run: |
          # Restore original configurations
          mv src-tauri/Cargo.toml.original src-tauri/Cargo.toml
          mv src-tauri/tauri.conf.json.original src-tauri/tauri.conf.json

  # Combine all artifacts into a single release
  release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    needs: [build, android-build]
    if: github.event_name == 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create Release Notes
        run: |
          echo "# Jam Shalat v${{ github.event.release.tag_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## 🕌 Prayer Schedule App - Indonesian Islamic Prayer Times" >> release_notes.md
          echo "" >> release_notes.md
          echo "### ✨ Features:" >> release_notes.md
          echo "- 🕐 **Auto-advance Prayer Times** - Automatically highlights current and next prayers" >> release_notes.md
          echo "- 🎨 **8 Theme Colors** with full dark mode support" >> release_notes.md
          echo "- 🖼️ **Sortable Background Images** - Drag & drop to reorder rotation" >> release_notes.md
          echo "- 🔄 **Dual Background Types** - Otomatis (Unsplash) and Local (Custom uploads)" >> release_notes.md
          echo "- 🌅 **Automatic Image Rotation** with user-controlled order" >> release_notes.md
          echo "- 🇮🇩 **Indonesian Localization** for better user experience" >> release_notes.md
          echo "- ⚙️ **Modern Settings Modal** with comprehensive customization" >> release_notes.md
          echo "- 📱 **Responsive Design** works on all screen sizes" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Downloads:" >> release_notes.md
          echo "- **Windows**: Download the `.msi` installer" >> release_notes.md
          echo "- **macOS**: Download the `.dmg` file (Universal - Intel & Apple Silicon)" >> release_notes.md
          echo "- **Linux**: Download the `.AppImage` or `.deb` package" >> release_notes.md
          echo "- **Android**: Download the `.apk` file for sideloading" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Installation:" >> release_notes.md
          echo "#### Windows & Linux:" >> release_notes.md
          echo "1. Download the appropriate file for your operating system" >> release_notes.md
          echo "2. Run the installer or open the application" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### macOS:" >> release_notes.md
          echo "1. Download the `.dmg` file" >> release_notes.md
          echo "2. Open the `.dmg` and drag Jam Shalat to Applications" >> release_notes.md
          echo "3. **Important**: If you see \"damaged app\" error, run this command in Terminal:" >> release_notes.md
          echo "   \`sudo xattr -rd com.apple.quarantine /Applications/\"Jam Shalat.app\"\`" >> release_notes.md
          echo "4. Alternatively, right-click the app → Open → Open (bypass Gatekeeper)" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Android:" >> release_notes.md
          echo "1. Download the `.apk` file" >> release_notes.md
          echo "2. Enable \"Unknown Sources\" in Android Settings → Security" >> release_notes.md
          echo "3. Install the APK file" >> release_notes.md
          echo "4. Grant necessary permissions when prompted" >> release_notes.md
          echo "" >> release_notes.md
          echo "### ⚙️ Setup:" >> release_notes.md
          echo "1. Configure your location and preferences in Settings" >> release_notes.md
          echo "2. Enjoy accurate prayer times with beautiful backgrounds!" >> release_notes.md
